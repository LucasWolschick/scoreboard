/*
    UF:
    inteiro:1
    add:1
    mul:3
    INST:
    lw: 1
    mul: 10
    sub: 2
    div: 40
    add: 2
*/

.data
    # número a ser buscado
    48
    # lista de números
    1 11 15 15 18 22 26 28 29 32 36 42 46 49 50 56 70 75 75 75 79 89 98 100
    # o índice final estará na posição de memória 0
.text
    # r1 contém o endereço do ponteiro esquerdo (l)
    # r2 contém o endereço do ponteiro direito (r)
    # r3 contém o endereço central (m)
    # r4 contém o valor no ponteiro esquerdo
    # r5 contém o valor no ponteiro direito
    # r6 contém o valor no endereço central

    # r7 contém o índice do valor buscado

    # r10 contém o valor sendo buscado
    lw r10, 0(r0)

    # r12 contém a constante 2
    addi r12, r0, 2
    # r14 contém a constante 4
    addi r14, r0, 4

    # inicializa r1, r2
    addi r1, r0, 4
    addi r2, r0, 96

    # LOOP: (120)
    # while (l <= r)
    bgt r1, r2, 68 # EXIT

    # calcula m = l + (r - l) / 2
    sub r3, r2, r1
    div r3, r3, r12
    add r3, r1, r3

    # arredonda para múltiplo de 4
    div r3, r3, r14
    mul r3, r3, r14
    
    # carrega r1, r2, r3 da memória para r4, r5, r6
    lw r4, 0(r1)
    lw r5, 0(r2)
    lw r6, 0(r3)

    # if (arr[m] == x)
    bne r6, r10, 12 # ELSE1
    add r7, r0, r3
    sw r7, 0(r0)
    exit

    # ELSE1:
    # if (arr[m] < x)
    bgt r6, r10, 8 # ELSE2
    addi r1, r3, 4
    beq r0, r0, 4

    # ELSE2:
    subi r2, r3, 4

    j 120 # LOOP

    # EXIT: (180)
    addi r7, r0, -1
    sw r7, 0(r0)
    exit